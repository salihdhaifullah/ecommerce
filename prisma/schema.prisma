generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]

  @@index([name(sort: Desc)])
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]

  @@index([name(sort: Desc)])
}

model Likes {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Product {
  id              Int           @id @default(autoincrement())
  title           String
  content         String
  images          String[]
  imageUrl        String
  tags            Tag[]
  feedBacks       FeedBack[]
  likes           Likes[]
  saleProduct     SaleProduct[]
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  createdAt       DateTime      @default(now())
  discount        Float
  price           Decimal
  pieces          Decimal
  stripeProductId String
  stripePriceId   String

  @@index([categoryId(sort: Desc), title, discount, price])
}

model FeedBack {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate      Int
  content   String

  @@unique([productId, userId])
  @@index([productId, rate])
}

model Sale {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  totalPrice        Decimal
  verified          Boolean       @default(false)
  checkoutSessionId String
  saleProducts      SaleProduct[]
  createdAt         DateTime      @default(now())
  address1          String
  address2          String
  phoneNumber       String
  country           String
  countryCode       String
  @@index([verified, userId, createdAt(sort: Desc)])
}

model SaleProduct {
  id            Int     @id @default(autoincrement())
  productId     Int
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  numberOfItems Int
  saleId        Int
  sale          Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  totalPrice    Decimal
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  createdAt DateTime   @default(now())
  lastName  String
  firstName String
  password  String
  role      Roles      @default(USER)
  payment   Sale[]
  likes     Likes[]
  isPayUse  Boolean    @default(false)
  FeedBack  FeedBack[]

  @@index([isPayUse, email(sort: Desc)])
}

enum Roles {
  ADMIN
  USER
}
